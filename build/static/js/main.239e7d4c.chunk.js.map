{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","htmlFor","placeholder","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newtext","toUpperCase","showAlert","handleLoClick","toLowerCase","handleclearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","newText","split","join","length","About","myStyle","setMyStyle","btntext","setBtnText","data-bs-parent","toggleStyle","border","class","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","BrowserRouter","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.239e7d4c.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          {/* Enable Dark Mode */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } mx-2`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              DarkMode\r\n            </label>\r\n          </div>\r\n\r\n          {/* Search Button */}\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = text.toUpperCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\")\r\n    }\r\n    const handleclearClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = \"\"\r\n        setText(newtext)\r\n        props.showAlert(\"Cleared Text!\",\"success\")\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"changed\")\r\n        setText(event.target.value)\r\n    }\r\n    const[text,setText] = useState(\"\");\r\n    const handleCopy =()=>{\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied!\",\"success\")\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText= text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"ExtraSpaces Removed!\",\"success\")\r\n\r\n    }\r\n  return (\r\n    <>\r\n   <div>\r\n    <div className=\"mb-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n     <h1>{props.heading}</h1>\r\n     <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey' , color:{color:props.mode==='light'?'black':'white'}}} id=\"myBox\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>Clear text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n   </div>\r\n   <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length} words and {text.length} charachters</p>\r\n    <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:'Enter something to textbox above to preview it here'}</p>\r\n\r\n   </div>\r\n   </>\r\n\r\n  )\r\n}\r\n","import React , {useState} from 'react'\r\n\r\nexport default function About() {\r\n \r\n  const[myStyle,setMyStyle] = useState({\r\n    color:\"black\",\r\n    backgroundColor:\"white\"\r\n  })\r\n  const[btntext,setBtnText]= useState(\"Enable Dark Mode\")\r\n  const toggleStyle = () =>{\r\n    if(myStyle.color === 'white'){\r\n      setMyStyle({\r\n      color:\"black\",\r\n      backgroundColor:\"white\",\r\n      border :'1px solid white'\r\n       } )\r\n       setBtnText(\"Enable Dark Mode\")\r\n    }\r\n  \r\n    else{\r\n      setMyStyle({\r\n      color:\"white\",\r\n      backgroundColor :\"black\"\r\n    })\r\n    setBtnText(\"Enable Light Mode\")\r\n      \r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\"style={myStyle}>\r\n      <h1 className='my-3'>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" >\r\n              <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n          <button  onClick={toggleStyle} type=\"button\" class=\"btn btn-primary\">{btntext} </button>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return word.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize (props.alert.type)}</strong>:{props.alert.msg}\r\n     \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(`light`); // Whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  // Toggle  Dark Mode\n  const toggleMode = () => {\n    if (mode === `light`) {\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#020334\";\n      showAlert(`Dark mode has been enabled`, \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(`light`);\n      document.body.style.backgroundColor = \"white\";\n      showAlert(`Light mode has been enabled`, \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <BrowserRouter>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n\n        <Alert alert={alert} />\n        <div className=\"container my-3\" mode={mode}>\n          <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n          </Routes>\n          <Routes>\n            <Route\n             exact path=\"/\"\n              element={\n                <TextForm\n                  showAlert={showAlert}\n                  heading=\"Enter the text to analyze below\"\n                  mode={mode}\n                />\n              }\n            />\n          </Routes>\n        </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}