{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newtext","toUpperCase","showAlert","handleLoClick","toLowerCase","handleclearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","newText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f4349133.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* Enable Dark Mode */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } mx-2`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              DarkMode\r\n            </label>\r\n          </div>\r\n\r\n          {/* Search Button\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button> */}\r\n          {/* </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = text.toUpperCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\")\r\n    }\r\n    const handleclearClick = ()=>{\r\n        // console.log(\"clicked\"+ text)\r\n        let newtext = \"\"\r\n        setText(newtext)\r\n        props.showAlert(\"Cleared Text!\",\"success\")\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"changed\")\r\n        setText(event.target.value)\r\n    }\r\n    const[text,setText] = useState(\"\");\r\n    const handleCopy =()=>{\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied!\",\"success\")\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText= text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"ExtraSpaces Removed!\",\"success\")\r\n\r\n    }\r\n  return (\r\n    <>\r\n   <div>\r\n    <div className=\"mb-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n     <h1>{props.heading}</h1>\r\n     <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey' , color:{color:props.mode==='light'?'black':'white'}}} id=\"myBox\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>Clear text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n   </div>\r\n   <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length} words and {text.length} charachters</p>\r\n    <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:'Enter something to textbox above to preview it here'}</p>\r\n\r\n   </div>\r\n   </>\r\n\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return word.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize (props.alert.type)}</strong>:{props.alert.msg}\r\n     \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(`light`); // Whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  // Toggle  Dark Mode\n  const toggleMode = () => {\n    if (mode === `light`) {\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#020334\";\n      showAlert(`Dark mode has been enabled`, \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(`light`);\n      document.body.style.backgroundColor = \"white\";\n      showAlert(`Light mode has been enabled`, \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n\n        <Alert alert={alert} />\n        <div className=\"container my-3\" mode={mode}>\n        <TextForm\n                  showAlert={showAlert}\n                  heading=\"Enter the text to analyze below\"\n                  mode={mode}\n                />\n          </div>\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n          </Routes>\n          <Routes>\n            <Route\n             exact path=\"/\"\n              element={\n                <TextForm\n                  showAlert={showAlert}\n                  heading=\"Enter the text to analyze below\"\n                  mode={mode}\n                />\n              }\n            />\n          </Routes>\n        </div>\n      </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}